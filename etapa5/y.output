Terminals unused in grammar

   TOKEN_ERROR


State 119 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: l_declarations

    2 l_declarations: declaration l_declarations
    3               | %empty

    4 declaration: tipo TK_IDENTIFIER '=' literal ';'
    5            | tipo TK_IDENTIFIER '[' LIT_INTEGER ']' init_vector ';'
    6            | tipo TK_IDENTIFIER '(' l_param ')' bloco ';'

    7 tipo: KW_BYTE
    8     | KW_INT
    9     | KW_FLOAT

   10 literal: LIT_INTEGER
   11        | LIT_FLOAT
   12        | LIT_CHAR

   13 init_vector: %empty
   14            | ':' literal vector_elements

   15 vector_elements: %empty
   16                | literal vector_elements

   17 l_param: %empty
   18        | param param_end

   19 param_end: %empty
   20          | ',' param param_end

   21 param: tipo TK_IDENTIFIER

   22 bloco: '{' l_cmd '}'

   23 l_cmd: cmd l_cmd_end

   24 l_cmd_end: %empty
   25          | ';' cmd l_cmd_end

   26 cmd: %empty
   27    | bloco
   28    | TK_IDENTIFIER '=' exp
   29    | TK_IDENTIFIER '[' exp ']' '=' exp
   30    | KW_READ TK_IDENTIFIER
   31    | KW_PRINT l_print
   32    | KW_RETURN exp
   33    | KW_IF '(' exp ')' KW_THEN cmd
   34    | KW_IF '(' exp ')' KW_THEN cmd KW_ELSE cmd
   35    | KW_LOOP '(' exp ')' cmd
   36    | KW_LEAP

   37 exp: TK_IDENTIFIER
   38    | TK_IDENTIFIER '[' exp ']'
   39    | TK_IDENTIFIER '(' l_args ')'
   40    | literal
   41    | exp '+' exp
   42    | exp '-' exp
   43    | exp '*' exp
   44    | exp '/' exp
   45    | exp '<' exp
   46    | exp '>' exp
   47    | exp OPERATOR_EQ exp
   48    | exp OPERATOR_GE exp
   49    | exp OPERATOR_LE exp
   50    | exp OPERATOR_DIF exp
   51    | exp OPERATOR_AND exp
   52    | exp OPERATOR_OR exp
   53    | OPERATOR_NOT exp
   54    | '(' exp ')'

   55 l_args: %empty
   56       | exp l_args_end

   57 l_args_end: %empty
   58           | ',' exp l_args_end

   59 l_print: element_print l_print_end

   60 l_print_end: %empty
   61            | ',' element_print l_print_end

   62 element_print: LIT_STRING
   63              | exp


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 33 34 35 39 54
')' (41) 6 33 34 35 39 54
'*' (42) 43
'+' (43) 41
',' (44) 20 58 61
'-' (45) 42
'/' (47) 44
':' (58) 14
';' (59) 4 5 6 25
'<' (60) 45
'=' (61) 4 28 29
'>' (62) 46
'[' (91) 5 29 38
']' (93) 5 29 38
'{' (123) 22
'}' (125) 22
error (256)
KW_BYTE (258) 7
KW_INT (259) 8
KW_FLOAT (260) 9
KW_IF (261) 33 34
KW_THEN (262) 33 34
KW_ELSE (263) 34
KW_LOOP (264) 35
KW_LEAP (265) 36
KW_READ (266) 30
KW_RETURN (267) 32
KW_PRINT (268) 31
OPERATOR_LE (269) 49
OPERATOR_GE (270) 48
OPERATOR_EQ (271) 47
OPERATOR_DIF (272) 50
OPERATOR_OR (273) 52
OPERATOR_AND (274) 51
OPERATOR_NOT (275) 53
TK_IDENTIFIER (276) 4 5 6 21 28 29 30 37 38 39
LIT_INTEGER (277) 5 10
LIT_FLOAT (278) 11
LIT_CHAR (279) 12
LIT_STRING (280) 62
TOKEN_ERROR (281)


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 1, on right: 0
l_declarations (45)
    on left: 2 3, on right: 1 2
declaration (46)
    on left: 4 5 6, on right: 2
tipo (47)
    on left: 7 8 9, on right: 4 5 6 21
literal (48)
    on left: 10 11 12, on right: 4 14 16 40
init_vector (49)
    on left: 13 14, on right: 5
vector_elements (50)
    on left: 15 16, on right: 14 16
l_param (51)
    on left: 17 18, on right: 6
param_end (52)
    on left: 19 20, on right: 18 20
param (53)
    on left: 21, on right: 18 20
bloco (54)
    on left: 22, on right: 6 27
l_cmd (55)
    on left: 23, on right: 22
l_cmd_end (56)
    on left: 24 25, on right: 23 25
cmd (57)
    on left: 26 27 28 29 30 31 32 33 34 35 36, on right: 23 25 33 34
    35
exp (58)
    on left: 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54,
    on right: 28 29 32 33 34 35 38 41 42 43 44 45 46 47 48 49 50 51
    52 53 54 56 58 63
l_args (59)
    on left: 55 56, on right: 39
l_args_end (60)
    on left: 57 58, on right: 56 58
l_print (61)
    on left: 59, on right: 31
l_print_end (62)
    on left: 60 61, on right: 59 61
element_print (63)
    on left: 62 63, on right: 59 61


State 0

    0 $accept: . program $end

    KW_BYTE   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    $default  reduce using rule 3 (l_declarations)

    program         go to state 4
    l_declarations  go to state 5
    declaration     go to state 6
    tipo            go to state 7


State 1

    7 tipo: KW_BYTE .

    $default  reduce using rule 7 (tipo)


State 2

    8 tipo: KW_INT .

    $default  reduce using rule 8 (tipo)


State 3

    9 tipo: KW_FLOAT .

    $default  reduce using rule 9 (tipo)


State 4

    0 $accept: program . $end

    $end  shift, and go to state 8


State 5

    1 program: l_declarations .

    $default  reduce using rule 1 (program)


State 6

    2 l_declarations: declaration . l_declarations

    KW_BYTE   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    $default  reduce using rule 3 (l_declarations)

    l_declarations  go to state 9
    declaration     go to state 6
    tipo            go to state 7


State 7

    4 declaration: tipo . TK_IDENTIFIER '=' literal ';'
    5            | tipo . TK_IDENTIFIER '[' LIT_INTEGER ']' init_vector ';'
    6            | tipo . TK_IDENTIFIER '(' l_param ')' bloco ';'

    TK_IDENTIFIER  shift, and go to state 10


State 8

    0 $accept: program $end .

    $default  accept


State 9

    2 l_declarations: declaration l_declarations .

    $default  reduce using rule 2 (l_declarations)


State 10

    4 declaration: tipo TK_IDENTIFIER . '=' literal ';'
    5            | tipo TK_IDENTIFIER . '[' LIT_INTEGER ']' init_vector ';'
    6            | tipo TK_IDENTIFIER . '(' l_param ')' bloco ';'

    '='  shift, and go to state 11
    '['  shift, and go to state 12
    '('  shift, and go to state 13


State 11

    4 declaration: tipo TK_IDENTIFIER '=' . literal ';'

    LIT_INTEGER  shift, and go to state 14
    LIT_FLOAT    shift, and go to state 15
    LIT_CHAR     shift, and go to state 16

    literal  go to state 17


State 12

    5 declaration: tipo TK_IDENTIFIER '[' . LIT_INTEGER ']' init_vector ';'

    LIT_INTEGER  shift, and go to state 18


State 13

    6 declaration: tipo TK_IDENTIFIER '(' . l_param ')' bloco ';'

    KW_BYTE   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    $default  reduce using rule 17 (l_param)

    tipo     go to state 19
    l_param  go to state 20
    param    go to state 21


State 14

   10 literal: LIT_INTEGER .

    $default  reduce using rule 10 (literal)


State 15

   11 literal: LIT_FLOAT .

    $default  reduce using rule 11 (literal)


State 16

   12 literal: LIT_CHAR .

    $default  reduce using rule 12 (literal)


State 17

    4 declaration: tipo TK_IDENTIFIER '=' literal . ';'

    ';'  shift, and go to state 22


State 18

    5 declaration: tipo TK_IDENTIFIER '[' LIT_INTEGER . ']' init_vector ';'

    ']'  shift, and go to state 23


State 19

   21 param: tipo . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 24


State 20

    6 declaration: tipo TK_IDENTIFIER '(' l_param . ')' bloco ';'

    ')'  shift, and go to state 25


State 21

   18 l_param: param . param_end

    ','  shift, and go to state 26

    $default  reduce using rule 19 (param_end)

    param_end  go to state 27


State 22

    4 declaration: tipo TK_IDENTIFIER '=' literal ';' .

    $default  reduce using rule 4 (declaration)


State 23

    5 declaration: tipo TK_IDENTIFIER '[' LIT_INTEGER ']' . init_vector ';'

    ':'  shift, and go to state 28

    $default  reduce using rule 13 (init_vector)

    init_vector  go to state 29


State 24

   21 param: tipo TK_IDENTIFIER .

    $default  reduce using rule 21 (param)


State 25

    6 declaration: tipo TK_IDENTIFIER '(' l_param ')' . bloco ';'

    '{'  shift, and go to state 30

    bloco  go to state 31


State 26

   20 param_end: ',' . param param_end

    KW_BYTE   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    tipo   go to state 19
    param  go to state 32


State 27

   18 l_param: param param_end .

    $default  reduce using rule 18 (l_param)


State 28

   14 init_vector: ':' . literal vector_elements

    LIT_INTEGER  shift, and go to state 14
    LIT_FLOAT    shift, and go to state 15
    LIT_CHAR     shift, and go to state 16

    literal  go to state 33


State 29

    5 declaration: tipo TK_IDENTIFIER '[' LIT_INTEGER ']' init_vector . ';'

    ';'  shift, and go to state 34


State 30

   22 bloco: '{' . l_cmd '}'

    KW_IF          shift, and go to state 35
    KW_LOOP        shift, and go to state 36
    KW_LEAP        shift, and go to state 37
    KW_READ        shift, and go to state 38
    KW_RETURN      shift, and go to state 39
    KW_PRINT       shift, and go to state 40
    TK_IDENTIFIER  shift, and go to state 41
    '{'            shift, and go to state 30

    $default  reduce using rule 26 (cmd)

    bloco  go to state 42
    l_cmd  go to state 43
    cmd    go to state 44


State 31

    6 declaration: tipo TK_IDENTIFIER '(' l_param ')' bloco . ';'

    ';'  shift, and go to state 45


State 32

   20 param_end: ',' param . param_end

    ','  shift, and go to state 26

    $default  reduce using rule 19 (param_end)

    param_end  go to state 46


State 33

   14 init_vector: ':' literal . vector_elements

    LIT_INTEGER  shift, and go to state 14
    LIT_FLOAT    shift, and go to state 15
    LIT_CHAR     shift, and go to state 16

    $default  reduce using rule 15 (vector_elements)

    literal          go to state 47
    vector_elements  go to state 48


State 34

    5 declaration: tipo TK_IDENTIFIER '[' LIT_INTEGER ']' init_vector ';' .

    $default  reduce using rule 5 (declaration)


State 35

   33 cmd: KW_IF . '(' exp ')' KW_THEN cmd
   34    | KW_IF . '(' exp ')' KW_THEN cmd KW_ELSE cmd

    '('  shift, and go to state 49


State 36

   35 cmd: KW_LOOP . '(' exp ')' cmd

    '('  shift, and go to state 50


State 37

   36 cmd: KW_LEAP .

    $default  reduce using rule 36 (cmd)


State 38

   30 cmd: KW_READ . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 51


State 39

   32 cmd: KW_RETURN . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 56


State 40

   31 cmd: KW_PRINT . l_print

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    LIT_STRING     shift, and go to state 57
    '('            shift, and go to state 54

    literal        go to state 55
    exp            go to state 58
    l_print        go to state 59
    element_print  go to state 60


State 41

   28 cmd: TK_IDENTIFIER . '=' exp
   29    | TK_IDENTIFIER . '[' exp ']' '=' exp

    '='  shift, and go to state 61
    '['  shift, and go to state 62


State 42

   27 cmd: bloco .

    $default  reduce using rule 27 (cmd)


State 43

   22 bloco: '{' l_cmd . '}'

    '}'  shift, and go to state 63


State 44

   23 l_cmd: cmd . l_cmd_end

    ';'  shift, and go to state 64

    $default  reduce using rule 24 (l_cmd_end)

    l_cmd_end  go to state 65


State 45

    6 declaration: tipo TK_IDENTIFIER '(' l_param ')' bloco ';' .

    $default  reduce using rule 6 (declaration)


State 46

   20 param_end: ',' param param_end .

    $default  reduce using rule 20 (param_end)


State 47

   16 vector_elements: literal . vector_elements

    LIT_INTEGER  shift, and go to state 14
    LIT_FLOAT    shift, and go to state 15
    LIT_CHAR     shift, and go to state 16

    $default  reduce using rule 15 (vector_elements)

    literal          go to state 47
    vector_elements  go to state 66


State 48

   14 init_vector: ':' literal vector_elements .

    $default  reduce using rule 14 (init_vector)


State 49

   33 cmd: KW_IF '(' . exp ')' KW_THEN cmd
   34    | KW_IF '(' . exp ')' KW_THEN cmd KW_ELSE cmd

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 67


State 50

   35 cmd: KW_LOOP '(' . exp ')' cmd

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 68


State 51

   30 cmd: KW_READ TK_IDENTIFIER .

    $default  reduce using rule 30 (cmd)


State 52

   53 exp: OPERATOR_NOT . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 69


State 53

   37 exp: TK_IDENTIFIER .
   38    | TK_IDENTIFIER . '[' exp ']'
   39    | TK_IDENTIFIER . '(' l_args ')'

    '['  shift, and go to state 70
    '('  shift, and go to state 71

    $default  reduce using rule 37 (exp)


State 54

   54 exp: '(' . exp ')'

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 72


State 55

   40 exp: literal .

    $default  reduce using rule 40 (exp)


State 56

   32 cmd: KW_RETURN exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    OPERATOR_OR   shift, and go to state 77
    OPERATOR_AND  shift, and go to state 78
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84

    $default  reduce using rule 32 (cmd)


State 57

   62 element_print: LIT_STRING .

    $default  reduce using rule 62 (element_print)


State 58

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp
   63 element_print: exp .

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    OPERATOR_OR   shift, and go to state 77
    OPERATOR_AND  shift, and go to state 78
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84

    $default  reduce using rule 63 (element_print)


State 59

   31 cmd: KW_PRINT l_print .

    $default  reduce using rule 31 (cmd)


State 60

   59 l_print: element_print . l_print_end

    ','  shift, and go to state 85

    $default  reduce using rule 60 (l_print_end)

    l_print_end  go to state 86


State 61

   28 cmd: TK_IDENTIFIER '=' . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 87


State 62

   29 cmd: TK_IDENTIFIER '[' . exp ']' '=' exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 88


State 63

   22 bloco: '{' l_cmd '}' .

    $default  reduce using rule 22 (bloco)


State 64

   25 l_cmd_end: ';' . cmd l_cmd_end

    KW_IF          shift, and go to state 35
    KW_LOOP        shift, and go to state 36
    KW_LEAP        shift, and go to state 37
    KW_READ        shift, and go to state 38
    KW_RETURN      shift, and go to state 39
    KW_PRINT       shift, and go to state 40
    TK_IDENTIFIER  shift, and go to state 41
    '{'            shift, and go to state 30

    $default  reduce using rule 26 (cmd)

    bloco  go to state 42
    cmd    go to state 89


State 65

   23 l_cmd: cmd l_cmd_end .

    $default  reduce using rule 23 (l_cmd)


State 66

   16 vector_elements: literal vector_elements .

    $default  reduce using rule 16 (vector_elements)


State 67

   33 cmd: KW_IF '(' exp . ')' KW_THEN cmd
   34    | KW_IF '(' exp . ')' KW_THEN cmd KW_ELSE cmd
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    OPERATOR_OR   shift, and go to state 77
    OPERATOR_AND  shift, and go to state 78
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84
    ')'           shift, and go to state 90


State 68

   35 cmd: KW_LOOP '(' exp . ')' cmd
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    OPERATOR_OR   shift, and go to state 77
    OPERATOR_AND  shift, and go to state 78
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84
    ')'           shift, and go to state 91


State 69

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp
   53    | OPERATOR_NOT exp .

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84

    $default  reduce using rule 53 (exp)


State 70

   38 exp: TK_IDENTIFIER '[' . exp ']'

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 92


State 71

   39 exp: TK_IDENTIFIER '(' . l_args ')'

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    $default  reduce using rule 55 (l_args)

    literal  go to state 55
    exp      go to state 93
    l_args   go to state 94


State 72

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp
   54    | '(' exp . ')'

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    OPERATOR_OR   shift, and go to state 77
    OPERATOR_AND  shift, and go to state 78
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84
    ')'           shift, and go to state 95


State 73

   49 exp: exp OPERATOR_LE . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 96


State 74

   48 exp: exp OPERATOR_GE . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 97


State 75

   47 exp: exp OPERATOR_EQ . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 98


State 76

   50 exp: exp OPERATOR_DIF . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 99


State 77

   52 exp: exp OPERATOR_OR . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 100


State 78

   51 exp: exp OPERATOR_AND . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 101


State 79

   45 exp: exp '<' . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 102


State 80

   46 exp: exp '>' . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 103


State 81

   41 exp: exp '+' . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 104


State 82

   42 exp: exp '-' . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 105


State 83

   43 exp: exp '*' . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 106


State 84

   44 exp: exp '/' . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 107


State 85

   61 l_print_end: ',' . element_print l_print_end

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    LIT_STRING     shift, and go to state 57
    '('            shift, and go to state 54

    literal        go to state 55
    exp            go to state 58
    element_print  go to state 108


State 86

   59 l_print: element_print l_print_end .

    $default  reduce using rule 59 (l_print)


State 87

   28 cmd: TK_IDENTIFIER '=' exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    OPERATOR_OR   shift, and go to state 77
    OPERATOR_AND  shift, and go to state 78
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84

    $default  reduce using rule 28 (cmd)


State 88

   29 cmd: TK_IDENTIFIER '[' exp . ']' '=' exp
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    OPERATOR_OR   shift, and go to state 77
    OPERATOR_AND  shift, and go to state 78
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84
    ']'           shift, and go to state 109


State 89

   25 l_cmd_end: ';' cmd . l_cmd_end

    ';'  shift, and go to state 64

    $default  reduce using rule 24 (l_cmd_end)

    l_cmd_end  go to state 110


State 90

   33 cmd: KW_IF '(' exp ')' . KW_THEN cmd
   34    | KW_IF '(' exp ')' . KW_THEN cmd KW_ELSE cmd

    KW_THEN  shift, and go to state 111


State 91

   35 cmd: KW_LOOP '(' exp ')' . cmd

    KW_IF          shift, and go to state 35
    KW_LOOP        shift, and go to state 36
    KW_LEAP        shift, and go to state 37
    KW_READ        shift, and go to state 38
    KW_RETURN      shift, and go to state 39
    KW_PRINT       shift, and go to state 40
    TK_IDENTIFIER  shift, and go to state 41
    '{'            shift, and go to state 30

    $default  reduce using rule 26 (cmd)

    bloco  go to state 42
    cmd    go to state 112


State 92

   38 exp: TK_IDENTIFIER '[' exp . ']'
   41    | exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    OPERATOR_OR   shift, and go to state 77
    OPERATOR_AND  shift, and go to state 78
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84
    ']'           shift, and go to state 113


State 93

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp
   56 l_args: exp . l_args_end

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    OPERATOR_OR   shift, and go to state 77
    OPERATOR_AND  shift, and go to state 78
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84
    ','           shift, and go to state 114

    $default  reduce using rule 57 (l_args_end)

    l_args_end  go to state 115


State 94

   39 exp: TK_IDENTIFIER '(' l_args . ')'

    ')'  shift, and go to state 116


State 95

   54 exp: '(' exp ')' .

    $default  reduce using rule 54 (exp)


State 96

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   49    | exp OPERATOR_LE exp .
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 49 (exp)


State 97

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   48    | exp OPERATOR_GE exp .
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 48 (exp)


State 98

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   47    | exp OPERATOR_EQ exp .
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 47 (exp)


State 99

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   50    | exp OPERATOR_DIF exp .
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 50 (exp)


State 100

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp
   52    | exp OPERATOR_OR exp .

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84

    $default  reduce using rule 52 (exp)


State 101

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   51    | exp OPERATOR_AND exp .
   52    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84

    $default  reduce using rule 51 (exp)


State 102

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   45    | exp '<' exp .
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 45 (exp)


State 103

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   46    | exp '>' exp .
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 46 (exp)


State 104

   41 exp: exp . '+' exp
   41    | exp '+' exp .
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 41 (exp)


State 105

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   42    | exp '-' exp .
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 42 (exp)


State 106

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   43    | exp '*' exp .
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    $default  reduce using rule 43 (exp)


State 107

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   44    | exp '/' exp .
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    $default  reduce using rule 44 (exp)


State 108

   61 l_print_end: ',' element_print . l_print_end

    ','  shift, and go to state 85

    $default  reduce using rule 60 (l_print_end)

    l_print_end  go to state 117


State 109

   29 cmd: TK_IDENTIFIER '[' exp ']' . '=' exp

    '='  shift, and go to state 118


State 110

   25 l_cmd_end: ';' cmd l_cmd_end .

    $default  reduce using rule 25 (l_cmd_end)


State 111

   33 cmd: KW_IF '(' exp ')' KW_THEN . cmd
   34    | KW_IF '(' exp ')' KW_THEN . cmd KW_ELSE cmd

    KW_IF          shift, and go to state 35
    KW_LOOP        shift, and go to state 36
    KW_LEAP        shift, and go to state 37
    KW_READ        shift, and go to state 38
    KW_RETURN      shift, and go to state 39
    KW_PRINT       shift, and go to state 40
    TK_IDENTIFIER  shift, and go to state 41
    '{'            shift, and go to state 30

    $default  reduce using rule 26 (cmd)

    bloco  go to state 42
    cmd    go to state 119


State 112

   35 cmd: KW_LOOP '(' exp ')' cmd .

    $default  reduce using rule 35 (cmd)


State 113

   38 exp: TK_IDENTIFIER '[' exp ']' .

    $default  reduce using rule 38 (exp)


State 114

   58 l_args_end: ',' . exp l_args_end

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 120


State 115

   56 l_args: exp l_args_end .

    $default  reduce using rule 56 (l_args)


State 116

   39 exp: TK_IDENTIFIER '(' l_args ')' .

    $default  reduce using rule 39 (exp)


State 117

   61 l_print_end: ',' element_print l_print_end .

    $default  reduce using rule 61 (l_print_end)


State 118

   29 cmd: TK_IDENTIFIER '[' exp ']' '=' . exp

    OPERATOR_NOT   shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    LIT_INTEGER    shift, and go to state 14
    LIT_FLOAT      shift, and go to state 15
    LIT_CHAR       shift, and go to state 16
    '('            shift, and go to state 54

    literal  go to state 55
    exp      go to state 121


State 119

   33 cmd: KW_IF '(' exp ')' KW_THEN cmd .
   34    | KW_IF '(' exp ')' KW_THEN cmd . KW_ELSE cmd

    KW_ELSE  shift, and go to state 122

    KW_ELSE   [reduce using rule 33 (cmd)]
    $default  reduce using rule 33 (cmd)


State 120

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp
   58 l_args_end: ',' exp . l_args_end

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    OPERATOR_OR   shift, and go to state 77
    OPERATOR_AND  shift, and go to state 78
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84
    ','           shift, and go to state 114

    $default  reduce using rule 57 (l_args_end)

    l_args_end  go to state 123


State 121

   29 cmd: TK_IDENTIFIER '[' exp ']' '=' exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   45    | exp . '<' exp
   46    | exp . '>' exp
   47    | exp . OPERATOR_EQ exp
   48    | exp . OPERATOR_GE exp
   49    | exp . OPERATOR_LE exp
   50    | exp . OPERATOR_DIF exp
   51    | exp . OPERATOR_AND exp
   52    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 73
    OPERATOR_GE   shift, and go to state 74
    OPERATOR_EQ   shift, and go to state 75
    OPERATOR_DIF  shift, and go to state 76
    OPERATOR_OR   shift, and go to state 77
    OPERATOR_AND  shift, and go to state 78
    '<'           shift, and go to state 79
    '>'           shift, and go to state 80
    '+'           shift, and go to state 81
    '-'           shift, and go to state 82
    '*'           shift, and go to state 83
    '/'           shift, and go to state 84

    $default  reduce using rule 29 (cmd)


State 122

   34 cmd: KW_IF '(' exp ')' KW_THEN cmd KW_ELSE . cmd

    KW_IF          shift, and go to state 35
    KW_LOOP        shift, and go to state 36
    KW_LEAP        shift, and go to state 37
    KW_READ        shift, and go to state 38
    KW_RETURN      shift, and go to state 39
    KW_PRINT       shift, and go to state 40
    TK_IDENTIFIER  shift, and go to state 41
    '{'            shift, and go to state 30

    $default  reduce using rule 26 (cmd)

    bloco  go to state 42
    cmd    go to state 124


State 123

   58 l_args_end: ',' exp l_args_end .

    $default  reduce using rule 58 (l_args_end)


State 124

   34 cmd: KW_IF '(' exp ')' KW_THEN cmd KW_ELSE cmd .

    $default  reduce using rule 34 (cmd)
